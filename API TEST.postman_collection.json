{
	"info": {
		"_postman_id": "330523fb-180a-401f-b420-3f6ec91c1e13",
		"name": "API TEST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30167724"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "LOGIN",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ambil access token dari response",
									"const json = pm.response.json();",
									"",
									"if (json.access_token) {",
									"  pm.environment.set(\"access_token\", json.access_token);",
									"  console.log(\"✅ Access token stored:\", json.access_token);",
									"} else {",
									"  console.warn(\"⚠️ No access_token found in response\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@gmail.com\",\n    \"password\": \"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/login",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "REGISTER",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ambil access token dari response",
									"const json = pm.response.json();",
									"",
									"if (json.access_token) {",
									"  pm.environment.set(\"access_token\", json.access_token);",
									"  console.log(\"✅ Access token stored:\", json.access_token);",
									"} else {",
									"  console.warn(\"⚠️ No access_token found in response\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Woamwo omo\",\n    \"email\": \"test9@gmail.com\",\n    \"password\": \"123123\",\n    \"password_confirmation\": \"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/register",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "CHANGE PASSWORD",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\":\"123123\",\n    \"new_password\":\"123123\",\n    \"new_password_confirmation\":\"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/change-password",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "PROFILE",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}auth/profile",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "REFRESH",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTcyLjE3LjE3LjE3Njo4MDAxL2FwaS9hdXRoL2xvZ2luIiwiaWF0IjoxNzQyNDQwNDY3LCJleHAiOjE3NDI0NDA1MjcsIm5iZiI6MTc0MjQ0MDQ2NywianRpIjoic0dVVXdTcGpHY1ZPQkFUZyIsInN1YiI6IjEiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.Fs1-XGYvhx_fvXFro2OGkwh6VGD8w3n07gTpQIaxUTY",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-Signature",
								"value": "a749ac550ba4caad7b755bdfde27d8274b46b71f96c5f811391dd8dc986b1016",
								"type": "text"
							},
							{
								"key": "X-Timestamp",
								"value": "1742440962014",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}auth/refresh",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGOUT",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}auth/logout",
							"host": [
								"{{base_url}}auth"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const SIGNATURE_KEY = pm.environment.get(\"SIGNATURE_KEY\") || \"default_secret\";",
					"",
					"// Timestamp seperti backend",
					"const now = Date.now();",
					"const datepProccess = Math.trunc(now / 1e3);",
					"const timestamp = 1e3 * datepProccess + (datepProccess % 997);",
					"",
					"// Resolve URL dari {{base_url}}",
					"const fullUrl = pm.variables.replaceIn(pm.request.url.toString());",
					"const path = new URL(fullUrl).pathname;",
					"",
					"// Tentukan apakah method punya body",
					"let bodyString = '';",
					"const methodsWithBody = ['POST', 'PUT', 'PATCH', 'DELETE'];",
					"",
					"if (methodsWithBody.includes(pm.request.method)) {",
					"  const raw = pm.request.body?.raw || '';",
					"  try {",
					"    const parsedBody = JSON.parse(raw);",
					"    bodyString = JSON.stringify(parsedBody);",
					"  } catch (e) {",
					"    bodyString = '';",
					"  }",
					"}",
					"",
					"// Bangun string signature",
					"const dataToSign = pm.request.method + path + bodyString + timestamp;",
					"console.log(\"🔐 dataToSign:\", dataToSign);",
					"",
					"// Buat signature dengan Web Crypto API",
					"const encoder = new TextEncoder();",
					"const keyData = encoder.encode(SIGNATURE_KEY);",
					"const data = encoder.encode(dataToSign);",
					"",
					"crypto.subtle.importKey(",
					"  'raw',",
					"  keyData,",
					"  { name: 'HMAC', hash: 'SHA-256' },",
					"  false,",
					"  ['sign']",
					").then(cryptoKey => {",
					"  return crypto.subtle.sign('HMAC', cryptoKey, data);",
					"}).then(signatureBuffer => {",
					"  const signatureHex = Array.from(new Uint8Array(signatureBuffer))",
					"    .map(b => b.toString(16).padStart(2, '0'))",
					"    .join('');",
					"",
					"  // Masukkan header signature dan timestamp",
					"  pm.request.headers.upsert({ key: \"X-Signature\", value: signatureHex });",
					"  pm.request.headers.upsert({ key: \"X-Timestamp\", value: timestamp.toString() });",
					"",
					"  console.log(\"✅ Signature generated:\", signatureHex);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}